# http://graphite.wikidot.com/installation
---
- hosts: all
  user: jwallace
  sudo: yes
  tasks:
  - include: disable-selinux.yml

  - name: check to see if python 2.7 altinstall exists!
    stat: path=/usr/local/bin/python2.7
    register: p2

  - name: Upgrade python if CentOS < 7
    include: python2.7.yml
    when: ansible_distribution=="CentOS" and ansible_distribution_major_version|int < 7 and not p2.stat.exists

  - name: We need git, and some python tools
    yum: pkg={{ item }} state=installed
    with_items:
    - git
    - pcre
    - pcre-devel

#  - name: Install python-twisted-core (CentOS 7)
#    yum: name=python-twisted-core state=installed
#    when: ansible_distribution=="CentOS" and ansible_distribution_major_version=="7"

#  - name: Install python-twisted (CentOS < 7)
#    yum: name=python-twisted state=installed
#    when: ansible_distribution=="CentOS" and ansible_distribution_major_version|int < 7

  - name: python-memcached, pycairo, bitmap-fonts-compat, libevent-devel, python-devel, gcc-c++
    yum: pkg={{ item }} state=installed
    with_items:
    - python-memcached
    - pycairo
    - pytz
    - bitmap-fonts-compat
    - libevent-devel
    - python-devel
    - gcc-c++
    - sqlite-devel
    - libffi-devel

  - name: Install pip
    easy_install: executable=/usr/local/bin/easy_install name=pip

#  - name: Upgrade setuptools (1/2)
#    pip: name=setuptools extra_args='--upgrade --no-use-wheel'

#  - name: Upgrade setuptools (2/2)
#    pip: name=setuptools extra_args='--upgrade --no-use-wheel'

  - name: Use pip to install needed python libraries
    pip: name={{ item }} use_mirrors=no executable=/usr/local/bin/pip
    with_items:
    - django
    - django-tagging
    - uwsgi
    - pyopenssl 
    - ndg-httpsclient
    - pyasn1
    - pysqlite
    - twisted

  - name: Download whisper (stable version)
    git: repo=https://github.com/graphite-project/whisper.git dest=/tmp/whisper version=0.9.x

  - name: Install whisper
    command: chdir=/tmp/whisper /usr/local/bin/python setup.py install

  - name: Download carbon
    git: repo=https://github.com/graphite-project/carbon.git dest=/tmp/carbon version=0.9.x

  - name: Install carbon
    command: chdir=/tmp/carbon /usr/local/bin/python setup.py install

  - name: Configure carbon (1/2)
    command: chdir=/opt/graphite/conf creates=carbon.conf cp carbon.conf.example carbon.conf

  - name: Configure carbon (2/2)
    command: chdir=/opt/graphite/conf creates=storage-schemas.conf cp storage-schemas.conf.example storage-schemas.conf

  - name: Download graphite-web
    git: repo=https://github.com/graphite-project/graphite-web.git dest=/tmp/graphite-web version=0.9.x

  - name: Install graphite-web
    command: chdir=/tmp/graphite-web /usr/local/bin/python setup.py install

  - name: Copy the uWSGI init script over
    copy: src=./filestore/uwsgi-init dest=/etc/init.d/uwsgi mode=0755

  - name: Copy the uWSGI Nginx/Django INI file over
    copy: src=./filestore/graphite.ini dest=/opt/graphite/conf/graphite.ini

  - name: Copy the uwsgi.py file over
    copy: src=./filestore/uwsgi.py dest=/opt/graphite/webapp/graphite/uwsgi.py

  - name: Install EPEL Repo
    yum: name=epel-release state=installed

  - name: Install nginx
    yum: pkg=nginx state=installed

  - name: Install the graphite nginx config
    copy: src=./filestore/graphite.conf dest=/etc/nginx/conf.d/graphite.conf

  - name: Install the graphite settings file
    copy: src=./filestore/graphite_local_settings.py dest=/opt/graphite/webapp/graphite/local_settings.py

  - name: Initialize the SQLite DB
    command: chdir=/opt/graphite/webapp/graphite /usr/local/bin/python manage.py syncdb --noinput

  - name: Setup proper graphite permissions
    file: path=/opt/graphite/storage owner=nginx recurse=yes

  - name: Copy over the carbon-cache init script
    copy: src=./filestore/carbon-cache-init dest=/etc/init.d/carbon-cache  mode=0755

  - name: Start nginx/uwsgi and have them start on reboot
    service: name={{ item }} enabled=yes state=started
    with_items:
    - nginx
    - uwsgi
    - carbon-cache

  - name: Disable IPTables
    service: name=iptables state=stopped enabled=no

  - name: fix a big in the graphite code!
    lineinfile: dest=/opt/graphite/webapp/graphite/storage.py regexp="return whisper.fetch" line="      return whisper.fetch(self.fs_path, startTime, endTime)"

  - name: create the django super user
    shell: cd /opt/graphite/webapp/graphite; echo "from django.contrib.auth.models import User; User.objects.create_superuser('jwallace', 'james.wallace@needls.com', 'testing')" | /usr/local/bin/python manage.py shell

  - name: update the uwsgi.py file
    copy: src=filestore/uwsgi.py dest=/opt/graphite/webapp/graphite/uwsgi.py owner=root group=root mode=644 

# at this point, you need to create a superuser manually
# cd /opt/graphite/webapp/graphite; python manage.py createsuperuser
#

#  - name: fix up a bug in the wsgi_app call
#    lineinfile: dest=/opt/graphite/webapp/graphite regexp=^SELINUX= line=SELINUX=enforcing
# in /opt/graphite/conf/carbon.conf we have to change the storage directory to point to /opt/graphite/storage before
# anything in the UI gets picked up!
